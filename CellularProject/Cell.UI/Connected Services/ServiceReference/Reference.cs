//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cell.UI.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ICellContract")]
    public interface ICellContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/LoginClient", ReplyAction="http://tempuri.org/ICellContract/LoginClientResponse")]
        Cell.Models.Entities.Client LoginClient(string Id, string contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/LoginClient", ReplyAction="http://tempuri.org/ICellContract/LoginClientResponse")]
        System.Threading.Tasks.Task<Cell.Models.Entities.Client> LoginClientAsync(string Id, string contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetAllClients", ReplyAction="http://tempuri.org/ICellContract/GetAllClientsResponse")]
        System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Client> GetAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetAllClients", ReplyAction="http://tempuri.org/ICellContract/GetAllClientsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Client>> GetAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetAllLines", ReplyAction="http://tempuri.org/ICellContract/GetAllLinesResponse")]
        System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Line> GetAllLines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetAllLines", ReplyAction="http://tempuri.org/ICellContract/GetAllLinesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Line>> GetAllLinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetInvoices", ReplyAction="http://tempuri.org/ICellContract/GetInvoicesResponse")]
        System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Invoice> GetInvoices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetInvoices", ReplyAction="http://tempuri.org/ICellContract/GetInvoicesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Invoice>> GetInvoicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/ExportInvoicePdf", ReplyAction="http://tempuri.org/ICellContract/ExportInvoicePdfResponse")]
        byte[] ExportInvoicePdf(int lineId, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/ExportInvoicePdf", ReplyAction="http://tempuri.org/ICellContract/ExportInvoicePdfResponse")]
        System.Threading.Tasks.Task<byte[]> ExportInvoicePdfAsync(int lineId, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/ExportInvoiceExcel", ReplyAction="http://tempuri.org/ICellContract/ExportInvoiceExcelResponse")]
        byte[] ExportInvoiceExcel(int lineId, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/ExportInvoiceExcel", ReplyAction="http://tempuri.org/ICellContract/ExportInvoiceExcelResponse")]
        System.Threading.Tasks.Task<byte[]> ExportInvoiceExcelAsync(int lineId, int month, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddClient", ReplyAction="http://tempuri.org/ICellContract/AddClientResponse")]
        Cell.Models.Entities.Client AddClient(Cell.Models.Entities.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddClient", ReplyAction="http://tempuri.org/ICellContract/AddClientResponse")]
        System.Threading.Tasks.Task<Cell.Models.Entities.Client> AddClientAsync(Cell.Models.Entities.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdateClient", ReplyAction="http://tempuri.org/ICellContract/UpdateClientResponse")]
        bool UpdateClient(Cell.Models.Entities.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdateClient", ReplyAction="http://tempuri.org/ICellContract/UpdateClientResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientAsync(Cell.Models.Entities.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/RemoveClient", ReplyAction="http://tempuri.org/ICellContract/RemoveClientResponse")]
        bool RemoveClient(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/RemoveClient", ReplyAction="http://tempuri.org/ICellContract/RemoveClientResponse")]
        System.Threading.Tasks.Task<bool> RemoveClientAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddClientLine", ReplyAction="http://tempuri.org/ICellContract/AddClientLineResponse")]
        Cell.Models.Entities.Line AddClientLine(Cell.Models.Entities.Line line, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddClientLine", ReplyAction="http://tempuri.org/ICellContract/AddClientLineResponse")]
        System.Threading.Tasks.Task<Cell.Models.Entities.Line> AddClientLineAsync(Cell.Models.Entities.Line line, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdateClientLine", ReplyAction="http://tempuri.org/ICellContract/UpdateClientLineResponse")]
        bool UpdateClientLine(Cell.Models.Entities.Line line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdateClientLine", ReplyAction="http://tempuri.org/ICellContract/UpdateClientLineResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientLineAsync(Cell.Models.Entities.Line line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/RemoveClientLine", ReplyAction="http://tempuri.org/ICellContract/RemoveClientLineResponse")]
        bool RemoveClientLine(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/RemoveClientLine", ReplyAction="http://tempuri.org/ICellContract/RemoveClientLineResponse")]
        System.Threading.Tasks.Task<bool> RemoveClientLineAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetClientTypes", ReplyAction="http://tempuri.org/ICellContract/GetClientTypesResponse")]
        System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.ClientType> GetClientTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetClientTypes", ReplyAction="http://tempuri.org/ICellContract/GetClientTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.ClientType>> GetClientTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddClientType", ReplyAction="http://tempuri.org/ICellContract/AddClientTypeResponse")]
        Cell.Models.Entities.ClientType AddClientType(Cell.Models.Entities.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddClientType", ReplyAction="http://tempuri.org/ICellContract/AddClientTypeResponse")]
        System.Threading.Tasks.Task<Cell.Models.Entities.ClientType> AddClientTypeAsync(Cell.Models.Entities.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdateClientType", ReplyAction="http://tempuri.org/ICellContract/UpdateClientTypeResponse")]
        bool UpdateClientType(Cell.Models.Entities.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdateClientType", ReplyAction="http://tempuri.org/ICellContract/UpdateClientTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientTypeAsync(Cell.Models.Entities.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/RemoveClientType", ReplyAction="http://tempuri.org/ICellContract/RemoveClientTypeResponse")]
        bool RemoveClientType(Cell.Models.Entities.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/RemoveClientType", ReplyAction="http://tempuri.org/ICellContract/RemoveClientTypeResponse")]
        System.Threading.Tasks.Task<bool> RemoveClientTypeAsync(Cell.Models.Entities.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetAllPackages", ReplyAction="http://tempuri.org/ICellContract/GetAllPackagesResponse")]
        System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Package> GetAllPackages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetAllPackages", ReplyAction="http://tempuri.org/ICellContract/GetAllPackagesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Package>> GetAllPackagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetOptimalPackage", ReplyAction="http://tempuri.org/ICellContract/GetOptimalPackageResponse")]
        Cell.Models.Entities.Package GetOptimalPackage(int lineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/GetOptimalPackage", ReplyAction="http://tempuri.org/ICellContract/GetOptimalPackageResponse")]
        System.Threading.Tasks.Task<Cell.Models.Entities.Package> GetOptimalPackageAsync(int lineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddPackage", ReplyAction="http://tempuri.org/ICellContract/AddPackageResponse")]
        Cell.Models.Entities.Package AddPackage(Cell.Models.Entities.Package package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/AddPackage", ReplyAction="http://tempuri.org/ICellContract/AddPackageResponse")]
        System.Threading.Tasks.Task<Cell.Models.Entities.Package> AddPackageAsync(Cell.Models.Entities.Package package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdatePackage", ReplyAction="http://tempuri.org/ICellContract/UpdatePackageResponse")]
        bool UpdatePackage(Cell.Models.Entities.Package package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/UpdatePackage", ReplyAction="http://tempuri.org/ICellContract/UpdatePackageResponse")]
        System.Threading.Tasks.Task<bool> UpdatePackageAsync(Cell.Models.Entities.Package package);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/LoginUser", ReplyAction="http://tempuri.org/ICellContract/LoginUserResponse")]
        bool LoginUser(string fullName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICellContract/LoginUser", ReplyAction="http://tempuri.org/ICellContract/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string fullName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICellContractChannel : Cell.UI.ServiceReference.ICellContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CellContractClient : System.ServiceModel.ClientBase<Cell.UI.ServiceReference.ICellContract>, Cell.UI.ServiceReference.ICellContract {
        
        public CellContractClient() {
        }
        
        public CellContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CellContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CellContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CellContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Cell.Models.Entities.Client LoginClient(string Id, string contactNumber) {
            return base.Channel.LoginClient(Id, contactNumber);
        }
        
        public System.Threading.Tasks.Task<Cell.Models.Entities.Client> LoginClientAsync(string Id, string contactNumber) {
            return base.Channel.LoginClientAsync(Id, contactNumber);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Client> GetAllClients() {
            return base.Channel.GetAllClients();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Client>> GetAllClientsAsync() {
            return base.Channel.GetAllClientsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Line> GetAllLines() {
            return base.Channel.GetAllLines();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Line>> GetAllLinesAsync() {
            return base.Channel.GetAllLinesAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Invoice> GetInvoices() {
            return base.Channel.GetInvoices();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Invoice>> GetInvoicesAsync() {
            return base.Channel.GetInvoicesAsync();
        }
        
        public byte[] ExportInvoicePdf(int lineId, int month, int year) {
            return base.Channel.ExportInvoicePdf(lineId, month, year);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExportInvoicePdfAsync(int lineId, int month, int year) {
            return base.Channel.ExportInvoicePdfAsync(lineId, month, year);
        }
        
        public byte[] ExportInvoiceExcel(int lineId, int month, int year) {
            return base.Channel.ExportInvoiceExcel(lineId, month, year);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExportInvoiceExcelAsync(int lineId, int month, int year) {
            return base.Channel.ExportInvoiceExcelAsync(lineId, month, year);
        }
        
        public Cell.Models.Entities.Client AddClient(Cell.Models.Entities.Client client) {
            return base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task<Cell.Models.Entities.Client> AddClientAsync(Cell.Models.Entities.Client client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public bool UpdateClient(Cell.Models.Entities.Client client) {
            return base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientAsync(Cell.Models.Entities.Client client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public bool RemoveClient(string id) {
            return base.Channel.RemoveClient(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveClientAsync(string id) {
            return base.Channel.RemoveClientAsync(id);
        }
        
        public Cell.Models.Entities.Line AddClientLine(Cell.Models.Entities.Line line, string clientId) {
            return base.Channel.AddClientLine(line, clientId);
        }
        
        public System.Threading.Tasks.Task<Cell.Models.Entities.Line> AddClientLineAsync(Cell.Models.Entities.Line line, string clientId) {
            return base.Channel.AddClientLineAsync(line, clientId);
        }
        
        public bool UpdateClientLine(Cell.Models.Entities.Line line) {
            return base.Channel.UpdateClientLine(line);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientLineAsync(Cell.Models.Entities.Line line) {
            return base.Channel.UpdateClientLineAsync(line);
        }
        
        public bool RemoveClientLine(string number) {
            return base.Channel.RemoveClientLine(number);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveClientLineAsync(string number) {
            return base.Channel.RemoveClientLineAsync(number);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.ClientType> GetClientTypes() {
            return base.Channel.GetClientTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.ClientType>> GetClientTypesAsync() {
            return base.Channel.GetClientTypesAsync();
        }
        
        public Cell.Models.Entities.ClientType AddClientType(Cell.Models.Entities.ClientType clientType) {
            return base.Channel.AddClientType(clientType);
        }
        
        public System.Threading.Tasks.Task<Cell.Models.Entities.ClientType> AddClientTypeAsync(Cell.Models.Entities.ClientType clientType) {
            return base.Channel.AddClientTypeAsync(clientType);
        }
        
        public bool UpdateClientType(Cell.Models.Entities.ClientType clientType) {
            return base.Channel.UpdateClientType(clientType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientTypeAsync(Cell.Models.Entities.ClientType clientType) {
            return base.Channel.UpdateClientTypeAsync(clientType);
        }
        
        public bool RemoveClientType(Cell.Models.Entities.ClientType clientType) {
            return base.Channel.RemoveClientType(clientType);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveClientTypeAsync(Cell.Models.Entities.ClientType clientType) {
            return base.Channel.RemoveClientTypeAsync(clientType);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Package> GetAllPackages() {
            return base.Channel.GetAllPackages();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Cell.Models.Entities.Package>> GetAllPackagesAsync() {
            return base.Channel.GetAllPackagesAsync();
        }
        
        public Cell.Models.Entities.Package GetOptimalPackage(int lineId) {
            return base.Channel.GetOptimalPackage(lineId);
        }
        
        public System.Threading.Tasks.Task<Cell.Models.Entities.Package> GetOptimalPackageAsync(int lineId) {
            return base.Channel.GetOptimalPackageAsync(lineId);
        }
        
        public Cell.Models.Entities.Package AddPackage(Cell.Models.Entities.Package package) {
            return base.Channel.AddPackage(package);
        }
        
        public System.Threading.Tasks.Task<Cell.Models.Entities.Package> AddPackageAsync(Cell.Models.Entities.Package package) {
            return base.Channel.AddPackageAsync(package);
        }
        
        public bool UpdatePackage(Cell.Models.Entities.Package package) {
            return base.Channel.UpdatePackage(package);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePackageAsync(Cell.Models.Entities.Package package) {
            return base.Channel.UpdatePackageAsync(package);
        }
        
        public bool LoginUser(string fullName, string password) {
            return base.Channel.LoginUser(fullName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string fullName, string password) {
            return base.Channel.LoginUserAsync(fullName, password);
        }
    }
}
